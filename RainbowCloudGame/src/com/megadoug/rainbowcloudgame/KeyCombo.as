package com.megadoug.rainbowcloudgame {	import flash.events.*;	import flash.events.KeyboardEvent;	import flash.display.Sprite;	public class KeyCombo {		//---------------------		// PUBLIC VARS		//---------------------		public var myFunction:Function;				public var myAutoOnPressFunction:Function;		//---------------------		// PRIVATE VARS		//---------------------		private var _allDown:Boolean = false;		private var _anyDown:Boolean = false;		private var _triggerOnPressOnly:Boolean = false;		private var myKeys_ar:Array;		private var myKeysDown_ar:Array;		// ^ parallel arrays		private var numDown:uint;		private var numTotal:uint;		private namespace keyCombo_namespace = "keyCombo_namespace";				private var stage = RainbowCloudGame.STAGE;		//---------------------		// CONSTRUCTOR FUNCTION		//---------------------		public function KeyCombo(keys_ar:Array,func:Function, onPressFunc:Function = null, doOnPress:Boolean=false) 		{			//trace("KeyCombo");			// keys_ar is a list of keycodes (uint)			myKeys_ar = keys_ar.concat();			//trace("myKeys_ar: "+myKeys_ar);			myFunction = func;			if(onPressFunc!=null){				myAutoOnPressFunction = onPressFunc;				_triggerOnPressOnly = true;			}			//_triggerOnPressOnly = doOnPress;			//addEventListener(Event.ADDED_TO_STAGE, init);			init();		}		//---------------------		// INITS FUNCTIONS		//---------------------		private function init():void		{			//trace("KeyCombo.init()");			myKeysDown_ar=new Array();			for(var i=0; i<myKeys_ar.length; i++){				myKeysDown_ar[i] = false;				//trace(String.fromCharCode(myKeys_ar[i]));			}			numDown = 0;			numTotal = myKeys_ar.length;			stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDown_handler);			stage.addEventListener(KeyboardEvent.KEY_UP,keyUp_handler);		}		//---------------------		// PRIVATE FUNCIONS		//---------------------				//---------------------		// PUBLIC FUNCTIONS		//---------------------				//---------------------		// HANDLERS		//---------------------		private function keyDown_handler(evt:KeyboardEvent):void{			var liveKey:uint = evt.keyCode;			//trace("KEYDOWN: "+liveKey.toString());			//var character:String = String.fromCharCode(evt.charCode);			//trace("DOWN: "+liveKey+" —— "+character);			for(var i:uint =0; i<myKeysDown_ar.length; i++){				if(!myKeysDown_ar[i]){					// check it					if(liveKey == myKeys_ar[i]){						// set it						myKeysDown_ar[i] = true;						numDown++;						//trace("setting: "+character+", numDown: "+numDown);						if(onPressOnly){							//trace("KeyPressed!");							myAutoOnPressFunction();						}						break;					}				}			}		}		private function keyUp_handler(evt:KeyboardEvent):void{			// Monitor release of keys (so "down" doesn't get continuously triggered)			var liveKey:uint = evt.keyCode;			//trace("KEYUP: "+liveKey);			//var character:String = String.fromCharCode(evt.charCode);			//trace("UP: "+liveKey+" —— "+character);			for(var i:uint =0; i<myKeysDown_ar.length; i++){				if(myKeysDown_ar[i]){					// check it					if(liveKey == myKeys_ar[i]){						// remove it						myKeysDown_ar[i] = false;						numDown--;						//trace("removing: "+character+", numDown: "+numDown);						break;					}				}			};		}				//---------------------		// GETTERS/SETTERS		//---------------------		public function get allDown():Boolean{			allDown = numDown == numTotal;			return _allDown;		}		public function set allDown(bool:Boolean):void{			_allDown = bool;		}		public function get anyDown():Boolean{			anyDown = numDown > 0;			return _anyDown;		}		public function set anyDown(bool:Boolean):void{			_anyDown = bool;		}		// v  ?Need outside access to this?  v		public function get onPressOnly():Boolean{			return _triggerOnPressOnly;		}		public function set onPressOnly(bool:Boolean):void{			_triggerOnPressOnly = bool;		}	}}